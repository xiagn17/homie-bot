import { MigrationInterface, QueryRunner } from 'typeorm';
import format from 'pg-format';
import { TaskDataSendMessageInterface } from '../modules/tasks/interfaces/TaskData.interface';
import { TaskTypeEnumInterface } from '../modules/tasks/interfaces/TaskTypeEnum.interface';
import { getReferralLink } from '../modules/bot/helpers/referralLink/getReferralLink';
import { EMOJI_SHARE } from '../modules/bot/constants/emoji';

interface TelegramUserInterface {
  chat_id: string;
}
const PUSH_MESSAGE: string =
  `üî• <b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!</b> –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ä–∞–∑—É –º–æ–∂–Ω–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ª–∏—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º –æ Homie.\n` +
  `\n` +
  `üîë –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å?\n` +
  `1 –∫–æ–Ω—Ç–∞–∫—Ç - –∑–∞ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª /start\n` +
  `2 –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –∑–∞ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É\n` +
  `3 –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –∑–∞ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—Å—Ç–∏–ª –æ–±—ä–µ–∫—Ç –Ω–∞ Homie\n` +
  `\n` +
  `üîë –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –¥—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç 1 –∫–æ–Ω—Ç–∞–∫—Ç!\n` +
  `\n` +
  `üîñ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è Homie –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç—ã —Å–º–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑:\n` +
  `/menu --> –ü—Ä–æ—á–µ–µ --> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è Homie`;

export class AddReferralUsers1648581384364 implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
        ALTER TABLE telegram_users
            ADD COLUMN referral_user_id uuid REFERENCES telegram_users (telegram_user_id)
    `);

    const renterUsers: TelegramUserInterface[] = await queryRunner.query(`
        SELECT chat_id FROM telegram_users tu
            INNER JOIN renters r on tu.telegram_user_id = r.telegram_user_id
    `);
    const tasks: TaskDataSendMessageInterface[] = renterUsers.map(u => ({
      chatId: u.chat_id,
      message: PUSH_MESSAGE,
      markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              url: `https://t.me/share/url?url=${getReferralLink(u.chat_id)}`,
              text: `${EMOJI_SHARE} –ü–æ–¥–µ–ª–∏—Ç—å—Å—è`,
            },
          ],
        ],
      }),
    }));
    if (!tasks.length) {
      return;
    }
    const scheduledFor = new Date();
    await queryRunner.query(
      format(
        `
          INSERT INTO tasks (type, data, scheduled_for) 
          VALUES %L
          ON CONFLICT DO NOTHING
        `,
        tasks.map(task => [TaskTypeEnumInterface.send_message, task, scheduledFor]),
      ),
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`
        ALTER TABLE telegram_users DROP COLUMN referral_user_id
    `);
  }
}
