import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { LoggerService } from '../logger/logger.service';
import { MatchDataType } from '../api/renter-matches/interfaces/renter-matches.type';
import { LandlordObjectEntity } from '../api/landlord-objects/entities/LandlordObject.entity';
import { FlowXoRequests } from './flow-xo.requests';
import { FlowXoSerializer } from './flow-xo.serializer';
import { FlowXoRouteType } from './interfaces/flow-xo.type';

const FLOW_URLS = {
  sendMatch: '/hooks/a/2mjzknbz',
  buyMatches: '/hooks/a/eaajwkyy',
  pushNotification: '/hooks/a/4xjkew94',
};

@Injectable()
export class FlowXoService {
  constructor(
    private logger: LoggerService,
    private configService: ConfigService,
    private flowXoRequests: FlowXoRequests,
    private flowXoSerializer: FlowXoSerializer,
  ) {
    this.logger.setContext(this.constructor.name);
  }

  public async sendMessageWithMatch(matchData: MatchDataType, isExistingMatch: boolean): Promise<void> {
    const flowData = this.flowXoSerializer.prepareMatchData(matchData, isExistingMatch);
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.sendMatch);
  }

  public async sendRenterToMatchPayment(chatId: string, botId: string): Promise<void> {
    const flowData = this.flowXoSerializer.preparePayMatchData(chatId, botId);
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.buyMatches);
  }

  public async notificationApproveLandlordObjectToAdmin({ chatId, botId }: FlowXoRouteType): Promise<void> {
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'admin_next_approve',
      '–¢—É—Ç –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–Ω–∫–µ—Ç—É –û–±—ä–µ–∫—Ç–∞. –ß–µ–∫–Ω–∏ –ø–ª–∏–∑!!!',
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  public async notificationApproveAdminToLandlord(
    isApproved: boolean,
    { chatId, botId }: FlowXoRouteType,
  ): Promise<void> {
    const msg = isApproved
      ? '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!<pre>\n</pre>' +
        '–¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–≤–∏–¥—è—Ç –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫, —è –ø—Ä–∏—à–ª—é —Å—é–¥–∞ –∞–Ω–∫–µ—Ç—É –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–≤—à–µ–≥–æ—Å—è!'
      : '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–º–æ–≥–ª–æ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é üò•<pre>\n</pre>' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –ß–∞—Å—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –≤ –Ω–∏—Ö üòâ';
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'landlord_got_approve',
      msg,
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  public async notificationNewLandlordObjectToRenter({ chatId, botId }: FlowXoRouteType): Promise<void> {
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'rent_next_object',
      '–£ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!',
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  public async notificationNewRenterToLandlord({ chatId, botId }: FlowXoRouteType): Promise<void> {
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'landlord_next_renter',
      '–ö—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º –æ–±—ä–µ–∫—Ç–æ–º.',
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  public async notificationLandlordContactsToRenter(
    landlordObject: LandlordObjectEntity,
    { chatId, botId }: FlowXoRouteType,
  ): Promise<void> {
    const message = this.formContactsMessageOfLandlord(landlordObject);
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'rent_landlord_contacts',
      message,
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  public async notificationLandlordRenewObject(
    landlordObject: LandlordObjectEntity,
    { chatId, botId }: FlowXoRouteType,
  ): Promise<void> {
    const message =
      `üß® –£–ø—Å, –≤–∫–ª—é—á–∏–ª—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!<pre>\n</pre><pre>\n</pre>` +
      `‚ùóÔ∏è –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #home${landlordObject.number} –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ <b>"–∞–∫—Ç—É–∞–ª—å–Ω–æ"</b>. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —è —Å–Ω–∏–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ß–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.`;
    const flowData = this.flowXoSerializer.prepareNotificationFlowData(
      {
        chatId,
        botId,
      },
      'landlord_renew_object',
      message,
    );
    await this.flowXoRequests.runFlowAtUser(flowData, FLOW_URLS.pushNotification);
  }

  private formContactsMessageOfLandlord(landlordObject: LandlordObjectEntity): string {
    const est_kontakt_text = `<b>–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!</b><pre>\n</pre>`;
    const skip_line_text = `<pre>\n</pre>`;
    const object_number_text = `üè° –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #home${landlordObject.number}`;
    const getNameText = (name: string): string => `üëãüèª –ò–º—è: ${name}<pre>\n</pre>`;
    const getContactText = (
      { username, phoneNumber }: { username: string | null; phoneNumber: string },
      socials?: string,
    ): string => {
      if (socials) {
        return `üåê –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${socials}<pre>\n</pre>`;
      }
      return `üéä –ö–æ–Ω—Ç–∞–∫—Ç: ${username ? `@${username}` : phoneNumber}<pre>\n</pre>`;
    };

    let message = est_kontakt_text;

    const adminUsername = this.configService.get('adminUsername');
    const subAdminUsername = this.configService.get('subAdminUsername');
    const isObjectFromAdmin =
      landlordObject.telegramUser.username === adminUsername ||
      landlordObject.telegramUser.username === subAdminUsername;
    if (isObjectFromAdmin) {
      const landlordName = landlordObject.name.split('-')[0].trim();
      const landlordSocials = landlordObject.name.split('-')[1].trim();
      message =
        message +
        getNameText(landlordName) +
        getContactText({ username: '', phoneNumber: '' }, landlordSocials) +
        skip_line_text +
        object_number_text;
    } else {
      message =
        message +
        getNameText(landlordObject.name) +
        getContactText({
          username: landlordObject.telegramUser.username,
          phoneNumber: landlordObject.phoneNumber,
        }) +
        skip_line_text +
        object_number_text;
    }

    return message;
  }
}
